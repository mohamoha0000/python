# بيانات التدريب (AND logic)
X = [
    [0, 0],
    [0, 1],
    [1, 0],
    [1, 1]
]
Y = [0, 0, 0, 1]

# أوزان الطبقة المخفية الأولى (2 نيرون × 2 مدخل)
w1_1 = [0.1, 0.2]  # نيرون h1_1
w1_2 = [0.3, 0.4]  # نيرون h1_2

# أوزان الطبقة المخفية الثانية (2 نيرون × 2 من الطبقة السابقة)
w2_1 = [0.5, 0.6]  # نيرون h2_1
w2_2 = [0.7, 0.8]  # نيرون h2_2

# أوزان إلى الإخراج
w3 = [0.9, 1.0]  # من h2_1 و h2_2 إلى y

# الانحيازات
b1_1 = 0.1
b1_2 = 0.2
b2_1 = 0.3
b2_2 = 0.4
b3   = 0.5

# معدل التعلم
lr = 0.01
epochs = 1000

for epoch in range(epochs):
    total_loss = 0
    for i in range(4):
        x1, x2 = X[i]
        target = Y[i]

        # الطبقة الأولى
        h1_1 = x1 * w1_1[0] + x2 * w1_1[1] + b1_1
        h1_2 = x1 * w1_2[0] + x2 * w1_2[1] + b1_2

        # الطبقة الثانية
        h2_1 = h1_1 * w2_1[0] + h1_2 * w2_1[1] + b2_1
        h2_2 = h1_1 * w2_2[0] + h1_2 * w2_2[1] + b2_2

        # المخرج
        y = h2_1 * w3[0] + h2_2 * w3[1] + b3

        # الخطأ
        error = y - target
        total_loss += error ** 2
        dy = error  # لا تفعيل

        # التدرجات (الطبقة الأخيرة)
        dw3_0 = dy * h2_1
        dw3_1 = dy * h2_2
        db3   = dy

        # التدرجات (الطبقة الثانية)
        dh2_1 = dy * w3[0]
        dh2_2 = dy * w3[1]

        dw2_1_0 = dh2_1 * h1_1
        dw2_1_1 = dh2_1 * h1_2
        db2_1   = dh2_1

        dw2_2_0 = dh2_2 * h1_1
        dw2_2_1 = dh2_2 * h1_2
        db2_2   = dh2_2

        # التدرجات (الطبقة الأولى)
        dh1_1 = dh2_1 * w2_1[0] + dh2_2 * w2_2[0]
        dh1_2 = dh2_1 * w2_1[1] + dh2_2 * w2_2[1]

        dw1_1_0 = dh1_1 * x1
        dw1_1_1 = dh1_1 * x2
        db1_1   = dh1_1

        dw1_2_0 = dh1_2 * x1
        dw1_2_1 = dh1_2 * x2
        db1_2   = dh1_2

        # تحديث الأوزان والانحيازات
        w3[0] -= lr * dw3_0
        w3[1] -= lr * dw3_1
        b3    -= lr * db3

        w2_1[0] -= lr * dw2_1_0
        w2_1[1] -= lr * dw2_1_1
        b2_1    -= lr * db2_1

        w2_2[0] -= lr * dw2_2_0
        w2_2[1] -= lr * dw2_2_1
        b2_2    -= lr * db2_2

        w1_1[0] -= lr * dw1_1_0
        w1_1[1] -= lr * dw1_1_1
        b1_1    -= lr * db1_1

        w1_2[0] -= lr * dw1_2_0
        w1_2[1] -= lr * dw1_2_1
        b1_2    -= lr * db1_2

    if epoch % 100 == 0:
        print(f"Epoch {epoch}, Loss: {total_loss:.4f}")

# اختبار النموذج
print("\nنتائج بعد التدريب:")
for i in range(4):
    x1, x2 = X[i]
    h1_1 = x1 * w1_1[0] + x2 * w1_1[1] + b1_1
    h1_2 = x1 * w1_2[0] + x2 * w1_2[1] + b1_2

    h2_1 = h1_1 * w2_1[0] + h1_2 * w2_1[1] + b2_1
    h2_2 = h1_1 * w2_2[0] + h1_2 * w2_2[1] + b2_2

    y = h2_1 * w3[0] + h2_2 * w3[1] + b3
    print(f"Input: {[x1, x2]}, Output: {y:.4f}, Rounded: {round(y)}")
